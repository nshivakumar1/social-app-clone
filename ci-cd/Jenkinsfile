pipeline {
    agent any
    
    environment {
        ECR_REGISTRY = '297997106614.dkr.ecr.us-east-1.amazonaws.com'
        ECR_REPOSITORY = 'social-app-clone'
        AWS_REGION = 'us-east-1'
        ECS_CLUSTER = 'social-app-clone'
        ECS_SERVICE = 'social-app-clone'
        EKS_CLUSTER = 'social-app-eks'
        IMAGE_TAG = "${BUILD_NUMBER}"
    }
    
    stages {
        stage('🔍 Checkout') {
            steps {
                script {
                    echo "📥 Checking out code from GitHub..."
                    checkout scm
                    env.COMMIT_SHA = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    env.COMMIT_MESSAGE = sh(script: 'git log -1 --pretty=format:%s', returnStdout: true).trim()
                    echo "📝 Commit: ${env.COMMIT_SHA} - ${env.COMMIT_MESSAGE}"
                }
            }
        }
        
        stage('🧪 Test') {
            steps {
                script {
                    echo "🧪 Running tests..."
                    dir('app') {
                        sh 'echo "✅ Tests passed (placeholder)"'
                    }
                }
            }
        }
        
        stage('🐋 Build Docker Image') {
            steps {
                script {
                    echo "🔨 Building Docker image..."
                    dir('app') {
                        sh "docker build --platform linux/amd64 -t ${ECR_REPOSITORY}:${IMAGE_TAG} ."
                        sh "docker tag ${ECR_REPOSITORY}:${IMAGE_TAG} ${ECR_REPOSITORY}:latest"
                        sh "docker tag ${ECR_REPOSITORY}:${IMAGE_TAG} ${ECR_REPOSITORY}:${env.COMMIT_SHA}"
                    }
                    echo "✅ Docker image built successfully"
                }
            }
        }
        
        stage('📤 Push to ECR') {
            steps {
                script {
                    withCredentials([aws(credentialsId: 'aws-credentials')]) {
                        sh "echo '🔐 Logging into ECR...'"
                        sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}"
                        
                        sh "echo '📤 Pushing images to ECR...'"
                        sh "docker tag ${ECR_REPOSITORY}:${IMAGE_TAG} ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
                        sh "docker tag ${ECR_REPOSITORY}:latest ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest"
                        sh "docker tag ${ECR_REPOSITORY}:${env.COMMIT_SHA} ${ECR_REGISTRY}/${ECR_REPOSITORY}:${env.COMMIT_SHA}"
                        
                        sh "docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
                        sh "docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest"
                        sh "docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${env.COMMIT_SHA}"
                        
                        sh "echo '✅ Images pushed successfully'"
                    }
                }
            }
        }
        
        stage('🚀 Deploy to ECS') {
            steps {
                script {
                    withCredentials([aws(credentialsId: 'aws-credentials')]) {
                        sh "echo '🚀 Deploying to ECS Fargate...'"
                        sh "aws ecs update-service --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE} --force-new-deployment --region ${AWS_REGION}"
                        sh "echo '⏳ Waiting for ECS deployment to stabilize...'"
                        sh "aws ecs wait services-stable --cluster ${ECS_CLUSTER} --services ${ECS_SERVICE} --region ${AWS_REGION} --cli-read-timeout 300 --cli-connect-timeout 60"
                        sh "echo '✅ ECS deployment completed'"
                    }
                }
            }
        }
        
        stage('📝 Update GitOps Manifests') {
            steps {
                script {
                    try {
                        sh "echo '📝 Creating Kubernetes manifests...'"
                        sh "mkdir -p k8s-manifests"
                        
                        sh """
cat > k8s-manifests/deployment.yaml << 'EOF'
apiVersion: apps/v1
kind: Deployment
metadata:
  name: social-app-clone
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: social-app-clone
  template:
    metadata:
      labels:
        app: social-app-clone
    spec:
      containers:
      - name: social-app-clone
        image: ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          value: "production"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: social-app-clone-service
spec:
  selector:
    app: social-app-clone
  ports:
  - port: 80
    targetPort: 3000
  type: LoadBalancer
EOF
                        """
                        
                        // Commit GitOps changes back to repo
                        sh "git config user.email jenkins@social-app.com"
                        sh "git config user.name 'Jenkins GitOps'"
                        sh "git add k8s-manifests/ || true"
                        sh "git diff --staged --quiet || git commit -m 'GitOps: Update image to ${IMAGE_TAG}' || true"
                        sh "git push origin main || echo 'Push failed, but continuing...'"
                        
                        echo "✅ GitOps manifests created and pushed"
                    } catch (Exception e) {
                        echo "⚠️ GitOps update failed: ${e.getMessage()}"
                        echo "🔄 Continuing with deployment..."
                    }
                }
            }
        }
        
        stage('🔄 Setup ArgoCD Application') {
            steps {
                script {
                    withCredentials([aws(credentialsId: 'aws-credentials')]) {
                        try {
                            sh "echo '🔄 Configuring EKS kubeconfig...'"
                            
                            // Update kubeconfig for EKS
                            sh "aws eks update-kubeconfig --region ${AWS_REGION} --name ${EKS_CLUSTER} || echo 'EKS cluster not found or no access'"
                            
                            // Test kubectl connection
                            def kubectlWorks = sh(script: 'kubectl get nodes', returnStatus: true) == 0
                            
                            if (kubectlWorks) {
                                sh "echo '✅ kubectl connection successful'"
                                
                                // Create ArgoCD application
                                sh """
kubectl apply -f - << 'EOF' || echo "Failed to create ArgoCD application"
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: social-app-clone
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://github.com/nshivakumar1/social-app-clone.git
    targetRevision: main
    path: k8s-manifests
  destination:
    server: https://kubernetes.default.svc
    namespace: default
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
EOF
                                """
                                
                                // Trigger sync
                                sh 'kubectl patch app social-app-clone -n argocd -p \'{"operation":{"initiatedBy":{"username":"jenkins"},"sync":{"syncStrategy":{"hook":{}}}}}\' --type merge || echo "Sync patch failed"'
                                
                                echo "✅ ArgoCD application configured and synced"
                            } else {
                                echo "⚠️ kubectl not working - check EKS cluster and permissions"
                                echo "📝 GitOps manifests are ready for manual ArgoCD setup"
                            }
                        } catch (Exception e) {
                            echo "⚠️ ArgoCD setup failed: ${e.getMessage()}"
                            echo "📝 You can manually create the ArgoCD application using the generated manifests"
                        }
                    }
                }
            }
        }
        
        stage('🧪 Post-Deployment Tests') {
            steps {
                script {
                    sh "echo '🧪 Running post-deployment tests...'"
                    sh "sleep 30"
                    
                    try {
                        sh "echo 'Testing ECS deployment...'"
                        sh "curl -f -s http://social-app-clone-1321601292.us-east-1.elb.amazonaws.com/health || echo 'ECS health check failed'"
                        
                        sh "echo 'Testing main application...'"
                        sh "curl -f -s http://social-app-clone-1321601292.us-east-1.elb.amazonaws.com/ | head -5 || echo 'ECS app test failed'"
                        
                        echo "✅ Post-deployment tests completed"
                    } catch (Exception e) {
                        echo "⚠️ Some tests failed: ${e.getMessage()}"
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                sh "docker rmi ${ECR_REPOSITORY}:${IMAGE_TAG} || true"
                sh "docker rmi ${ECR_REPOSITORY}:latest || true"
                sh "docker rmi ${ECR_REPOSITORY}:${env.COMMIT_SHA} || true"
                cleanWs()
            }
        }
        
        success {
            script {
                echo """
                🎉 DEPLOYMENT SUCCESSFUL!
                ========================
                ✅ Build: ${IMAGE_TAG}
                ✅ Commit: ${env.COMMIT_SHA}
                ✅ Image: ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
                ✅ ECS: http://social-app-clone-1321601292.us-east-1.elb.amazonaws.com
                ✅ Message: ${env.COMMIT_MESSAGE}
                
                🚀 Your social media app is live and updated!
                📝 GitOps manifests are ready for ArgoCD
                """
                
                // Send success notification
                withCredentials([aws(credentialsId: 'aws-credentials')]) {
                    script {
                        def slackWebhook = sh(
                            script: 'aws ssm get-parameter --name "/social-app/slack/webhook-url" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "not-configured"',
                            returnStdout: true
                        ).trim()
                        
                        if (slackWebhook != "not-configured") {
                            def message = "🎉 Deployment Successful! Build #${BUILD_NUMBER} - ${env.COMMIT_MESSAGE} - http://social-app-clone-1321601292.us-east-1.elb.amazonaws.com"
                            sh "curl -X POST -H 'Content-type: application/json' --data '{\"text\":\"${message}\"}' '${slackWebhook}' || echo 'Slack notification failed'"
                        } else {
                            echo "💡 To enable Slack notifications, run: aws ssm put-parameter --name '/social-app/slack/webhook-url' --value 'YOUR_WEBHOOK_URL' --type 'SecureString'"
                        }
                    }
                }
            }
        }
        
        failure {
            script {
                echo """
                🚨 DEPLOYMENT FAILED!
                =====================
                ❌ Build: ${BUILD_NUMBER}
                ❌ Commit: ${env.COMMIT_SHA}
                ❌ Message: ${env.COMMIT_MESSAGE}
                
                📋 Check the build logs for details
                """
            }
        }
    }
}