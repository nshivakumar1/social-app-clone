pipeline {
    agent any
    
    environment {
        ECR_REGISTRY = '297997106614.dkr.ecr.us-east-1.amazonaws.com'
        ECR_REPOSITORY = 'social-app-clone'
        AWS_REGION = 'us-east-1'
        ECS_CLUSTER = 'social-app-clone'
        ECS_SERVICE = 'social-app-clone'
        IMAGE_TAG = "${BUILD_NUMBER}"
        
        // Notification settings
        SLACK_CHANNEL = '#social-clone-testing'
        JIRA_PROJECT = 'SAC'
    }
    
    stages {
        stage('üîç Checkout') {
            steps {
                script {
                    echo "üì• Checking out code from GitHub..."
                    checkout scm
                    env.COMMIT_MESSAGE = sh(script: 'git log -1 --pretty=%B', returnStdout: true).trim()
                    echo "üìù Commit: ${env.COMMIT_MESSAGE}"
                }
            }
        }
        
        stage('üß™ Test & Quality Check') {
            steps {
                script {
                    echo "üß™ Running tests and quality checks..."
                    try {
                        dir('app') {
                            sh 'npm ci --only=dev'
                            sh 'npm run test'
                            sh 'npm run lint'
                        }
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Quality checks failed, but continuing..."
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('üêã Build Docker Image') {
            steps {
                script {
                    echo "üî® Building Docker image..."
                    dir('app') {
                        sh "echo 'Building image: ${ECR_REPOSITORY}:${IMAGE_TAG}'"
                        sh "docker build --platform linux/amd64 -t ${ECR_REPOSITORY}:${IMAGE_TAG} ."
                        sh "docker tag ${ECR_REPOSITORY}:${IMAGE_TAG} ${ECR_REPOSITORY}:latest"
                        echo "‚úÖ Docker image built successfully"
                    }
                }
            }
        }
        
        stage('üì§ Push to ECR') {
            steps {
                script {
                    sh "echo 'üîê Logging into ECR...'"
                    sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}"
                    
                    sh "echo 'üì§ Pushing images to ECR...'"
                    sh "docker tag ${ECR_REPOSITORY}:${IMAGE_TAG} ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
                    sh "docker tag ${ECR_REPOSITORY}:latest ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest"
                    sh "docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
                    sh "docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest"
                    sh "echo '‚úÖ Images pushed successfully'"
                }
            }
        }
        
        stage('üöÄ Deploy to ECS') {
            steps {
                script {
                    sh "echo 'üöÄ Deploying to ECS Fargate...'"
                    sh "aws ecs update-service --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE} --force-new-deployment --region ${AWS_REGION}"
                    sh "echo '‚è≥ Waiting for ECS deployment to stabilize...'"
                    sh "aws ecs wait services-stable --cluster ${ECS_CLUSTER} --services ${ECS_SERVICE} --region ${AWS_REGION} --cli-read-timeout 300 --cli-connect-timeout 60"
                    sh "echo '‚úÖ ECS deployment completed'"
                }
            }
        }
        
        stage('üìù Update GitOps Repository') {
            steps {
                script {
                    try {
                        sh "echo 'üìù Updating Kubernetes manifests for GitOps...'"
                        sh "git config user.email jenkins@social-app.com"
                        sh "git config user.name 'Jenkins CI/CD'"
                        
                        // Create k8s-manifests directory if it doesn't exist
                        sh "mkdir -p k8s-manifests"
                        
                        // Update deployment.yaml with new image
                        sh "sed -i 's|image: .*|image: ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}|g' k8s-manifests/deployment.yaml || echo 'File not found, will create'"
                        
                        // Commit and push changes
                        sh "git add k8s-manifests/ || true"
                        sh "git commit -m 'Update image to ${IMAGE_TAG}' || true"
                        sh "git push origin main || true"
                        
                        echo "‚úÖ GitOps repository updated"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è GitOps update failed: ${e.getMessage()}"
                        echo "üîÑ ArgoCD will still deploy the latest image from ECR"
                    }
                }
            }
        }
        
        stage('üîÑ Configure ArgoCD Application') {
            steps {
                script {
                    try {
                        sh "echo 'üîÑ Configuring ArgoCD application...'"
                        
                        // Apply ArgoCD application if it doesn't exist
                        sh """
                        kubectl apply -f - <<EOF
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: social-app-clone
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://github.com/nshivakumar1/social-app-clone.git
    targetRevision: main
    path: k8s-manifests
  destination:
    server: https://kubernetes.default.svc
    namespace: default
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
EOF
                        """
                        
                        // Trigger sync
                        sh "kubectl patch app social-app-clone -n argocd -p '{\"operation\":{\"initiatedBy\":{\"username\":\"jenkins\"},\"sync\":{\"syncStrategy\":{\"hook\":{}}}}}' --type merge || true"
                        
                        echo "‚úÖ ArgoCD application configured and synced"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è ArgoCD configuration failed: ${e.getMessage()}"
                        echo "Please check ArgoCD installation and kubectl configuration"
                    }
                }
            }
        }
        
        stage('üß™ Post-Deployment Tests') {
            steps {
                script {
                    sh "echo 'üß™ Running post-deployment tests...'"
                    sh "sleep 30"  // Wait for deployment to stabilize
                    
                    sh "echo 'Testing ECS deployment...'"
                    sh "curl -f -s http://social-app-clone-1321601292.us-east-1.elb.amazonaws.com/health"
                    
                    sh "echo 'Testing main application...'"
                    sh "curl -f -s http://social-app-clone-1321601292.us-east-1.elb.amazonaws.com/ | head -10"
                    
                    sh "echo '‚úÖ Post-deployment tests completed'"
                }
            }
        }
    }
    
    post {
        always {
            script {
                sh "echo 'üßπ Cleaning up local Docker images...'"
                sh "docker rmi ${ECR_REPOSITORY}:${IMAGE_TAG} || true"
                sh "docker rmi ${ECR_REPOSITORY}:latest || true"
                sh "docker system prune -f"
                cleanWs()
            }
        }
        
        success {
            script {
                echo """
                üéâ DEPLOYMENT SUCCESSFUL!
                ========================
                ‚úÖ Build: ${IMAGE_TAG}
                ‚úÖ Image: ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
                ‚úÖ ECS: http://social-app-clone-1321601292.us-east-1.elb.amazonaws.com
                ‚úÖ Commit: ${env.COMMIT_MESSAGE}
                
                üöÄ Your social media app is live and updated!
                """
                
                // Slack notification
                try {
                    slackSend(
                        channel: env.SLACK_CHANNEL,
                        color: 'good',
                        message: """
üéâ *Deployment Successful!*
*Project:* Social App Clone
*Build:* #${BUILD_NUMBER}
*Image:* \`${ECR_REPOSITORY}:${IMAGE_TAG}\`
*URL:* http://social-app-clone-1321601292.us-east-1.elb.amazonaws.com
*Commit:* ${env.COMMIT_MESSAGE}
                        """
                    )
                } catch (Exception e) {
                    echo "‚ö†Ô∏è Slack notification failed: ${e.getMessage()}"
                }
                
                // Jira notification
                try {
                    // Create Jira issue for successful deployment
                    def jiraIssue = [
                        fields: [
                            project: [key: env.JIRA_PROJECT],
                            summary: "Deployment Successful - Social App Clone #${BUILD_NUMBER}",
                            description: """
Deployment completed successfully:
- Build: #${BUILD_NUMBER}
- Image: ${ECR_REPOSITORY}:${IMAGE_TAG}  
- URL: http://social-app-clone-1321601292.us-east-1.elb.amazonaws.com
- Commit: ${env.COMMIT_MESSAGE}
                            """,
                            issuetype: [name: 'Task']
                        ]
                    ]
                    
                    jiraNewIssue(issue: jiraIssue)
                } catch (Exception e) {
                    echo "‚ö†Ô∏è Jira notification failed: ${e.getMessage()}"
                }
            }
        }
        
        failure {
            script {
                // Slack notification for failure
                try {
                    slackSend(
                        channel: env.SLACK_CHANNEL,
                        color: 'danger',
                        message: """
üö® *Deployment Failed!*
*Project:* Social App Clone
*Build:* #${BUILD_NUMBER}
*Stage:* ${env.STAGE_NAME}
*URL:* ${BUILD_URL}
*Commit:* ${env.COMMIT_MESSAGE}
                        """
                    )
                } catch (Exception e) {
                    echo "‚ö†Ô∏è Slack notification failed: ${e.getMessage()}"
                }
                
                // Jira notification for failure
                try {
                    def jiraIssue = [
                        fields: [
                            project: [key: env.JIRA_PROJECT],
                            summary: "Deployment Failed - Social App Clone #${BUILD_NUMBER}",
                            description: """
Deployment failed:
- Build: #${BUILD_NUMBER}
- Stage: ${env.STAGE_NAME}
- URL: ${BUILD_URL}
- Commit: ${env.COMMIT_MESSAGE}

Please check the build logs for details.
                            """,
                            issuetype: [name: 'Bug'],
                            priority: [name: 'High']
                        ]
                    ]
                    
                    jiraNewIssue(issue: jiraIssue)
                } catch (Exception e) {
                    echo "‚ö†Ô∏è Jira notification failed: ${e.getMessage()}"
                }
            }
        }
    }
}