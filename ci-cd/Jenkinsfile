pipeline {
    agent any
    
    environment {
        ECR_REGISTRY = '297997106614.dkr.ecr.us-east-1.amazonaws.com'
        ECR_REPOSITORY = 'social-app-clone'
        AWS_REGION = 'us-east-1'
        ECS_CLUSTER = 'social-app-clone'
        ECS_SERVICE = 'social-app-clone'
        IMAGE_TAG = "${BUILD_NUMBER}"
    }
    
    stages {
        stage('🔍 Checkout') {
            steps {
                script {
                    echo "📥 Checking out code from GitHub..."
                    checkout scm
                    env.COMMIT_SHA = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    env.COMMIT_MESSAGE = sh(script: 'git log -1 --pretty=format:%s', returnStdout: true).trim()
                    echo "📝 Commit: ${env.COMMIT_SHA} - ${env.COMMIT_MESSAGE}"
                }
            }
        }
        
        stage('🧪 Test') {
            steps {
                script {
                    echo "🧪 Running tests..."
                    dir('app') {
                        sh 'echo "✅ Tests passed (placeholder)"'
                    }
                }
            }
        }
        
        stage('🐋 Build Docker Image') {
            steps {
                script {
                    echo "🔨 Building Docker image..."
                    dir('app') {
                        sh "docker build --platform linux/amd64 -t ${ECR_REPOSITORY}:${IMAGE_TAG} ."
                        sh "docker tag ${ECR_REPOSITORY}:${IMAGE_TAG} ${ECR_REPOSITORY}:latest"
                        sh "docker tag ${ECR_REPOSITORY}:${IMAGE_TAG} ${ECR_REPOSITORY}:${env.COMMIT_SHA}"
                    }
                    echo "✅ Docker image built successfully"
                }
            }
        }
        
        stage('📤 Push to ECR') {
            steps {
                script {
                    withCredentials([aws(credentialsId: 'aws-credentials')]) {
                        sh "echo '🔐 Logging into ECR...'"
                        sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}"
                        
                        sh "echo '📤 Pushing images to ECR...'"
                        sh "docker tag ${ECR_REPOSITORY}:${IMAGE_TAG} ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
                        sh "docker tag ${ECR_REPOSITORY}:latest ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest"
                        sh "docker tag ${ECR_REPOSITORY}:${env.COMMIT_SHA} ${ECR_REGISTRY}/${ECR_REPOSITORY}:${env.COMMIT_SHA}"
                        
                        sh "docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
                        sh "docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest"
                        sh "docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${env.COMMIT_SHA}"
                        
                        sh "echo '✅ Images pushed successfully'"
                    }
                }
            }
        }
        
        stage('🚀 Deploy to ECS') {
            steps {
                script {
                    withCredentials([aws(credentialsId: 'aws-credentials')]) {
                        sh "echo '🚀 Deploying to ECS Fargate...'"
                        sh "aws ecs update-service --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE} --force-new-deployment --region ${AWS_REGION}"
                        sh "echo '⏳ Waiting for ECS deployment to stabilize...'"
                        sh "aws ecs wait services-stable --cluster ${ECS_CLUSTER} --services ${ECS_SERVICE} --region ${AWS_REGION} --cli-read-timeout 300 --cli-connect-timeout 60"
                        sh "echo '✅ ECS deployment completed'"
                    }
                }
            }
        }
        
        stage('📝 Update GitOps Manifests') {
            steps {
                script {
                    try {
                        sh "echo '📝 Creating Kubernetes manifests...'"
                        sh "mkdir -p k8s-manifests"
                        
                        sh """
cat > k8s-manifests/deployment.yaml << 'EOF'
apiVersion: apps/v1
kind: Deployment
metadata:
  name: social-app-clone
  namespace: default
spec:
  replicas: 2
  selector:
    matchLabels:
      app: social-app-clone
  template:
    metadata:
      labels:
        app: social-app-clone
    spec:
      containers:
      - name: social-app-clone
        image: ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          value: "production"
---
apiVersion: v1
kind: Service
metadata:
  name: social-app-clone-service
spec:
  selector:
    app: social-app-clone
  ports:
  - port: 80
    targetPort: 3000
  type: LoadBalancer
EOF
                        """
                        
                        echo "✅ GitOps manifests created"
                    } catch (Exception e) {
                        echo "⚠️ GitOps update failed: ${e.getMessage()}"
                        echo "🔄 Continuing with deployment..."
                    }
                }
            }
        }
        
        stage('🔄 ArgoCD Sync') {
            steps {
                script {
                    try {
                        sh "echo '🔄 Checking ArgoCD configuration...'"
                        sh 'kubectl get applications -n argocd || echo "ArgoCD not configured, skipping sync"'
                        echo "✅ ArgoCD check completed"
                    } catch (Exception e) {
                        echo "⚠️ ArgoCD not available: ${e.getMessage()}"
                        echo "📝 Kubernetes manifests are available in k8s-manifests/ folder"
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                sh "docker rmi ${ECR_REPOSITORY}:${IMAGE_TAG} || true"
                sh "docker rmi ${ECR_REPOSITORY}:latest || true"
                sh "docker rmi ${ECR_REPOSITORY}:${env.COMMIT_SHA} || true"
                cleanWs()
            }
        }
        
        success {
            script {
                echo """
                🎉 DEPLOYMENT SUCCESSFUL!
                ========================
                ✅ Build: ${IMAGE_TAG}
                ✅ Commit: ${env.COMMIT_SHA}
                ✅ Image: ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
                ✅ ECS: http://social-app-clone-1321601292.us-east-1.elb.amazonaws.com
                ✅ Message: ${env.COMMIT_MESSAGE}
                
                🚀 Your social media app is live and updated!
                """
            }
        }
        
        failure {
            script {
                echo """
                🚨 DEPLOYMENT FAILED!
                =====================
                ❌ Build: ${BUILD_NUMBER}
                ❌ Commit: ${env.COMMIT_SHA}
                ❌ Message: ${env.COMMIT_MESSAGE}
                
                📋 Check the build logs for details
                """
            }
        }
    }
}